// <auto-generated />
using System;
using DealerApi.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DealerApi.DAL.Migrations
{
    [DbContext(typeof(DealerRndDBContext))]
    [Migration("20250816113247_addEntityPropertyForAppointmentDate")]
    partial class addEntityPropertyForAppointmentDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DealerApi.Entities.Models.Agreement", b =>
                {
                    b.Property<int>("AgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgreementID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgreementId"));

                    b.Property<DateTime>("AgreementDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("BookingFee")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerCarId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarID");

                    b.Property<int>("LoiId")
                        .HasColumnType("int")
                        .HasColumnName("LoiID");

                    b.Property<string>("MethodPayment")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Credit");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("AgreementId")
                        .HasName("PK__Agreemen__0A309D231A386255");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerCarId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex(new[] { "LoiId" }, "UQ__Agreemen__412C029BD9091658")
                        .IsUnique();

                    b.ToTable("Agreement", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.AgreementUnit", b =>
                {
                    b.Property<int>("AgreementUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AgreementUnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgreementUnitId"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int")
                        .HasColumnName("AgreementID");

                    b.Property<int>("DealerCarUnitId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarUnitID");

                    b.HasKey("AgreementUnitId")
                        .HasName("PK__Agreemen__3F6CC47871B29A00");

                    b.HasIndex("AgreementId");

                    b.HasIndex("DealerCarUnitId");

                    b.ToTable("AgreementUnit", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Color")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("EngineSize")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FuelType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Transmission")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("CarId")
                        .HasName("PK__Car__68A0340E7BA04DD0");

                    b.HasIndex(new[] { "CarModel" }, "idx_Car_CarModel");

                    b.HasIndex(new[] { "CarType" }, "idx_Car_CarType");

                    b.HasIndex(new[] { "Make" }, "idx_Car_Make");

                    b.ToTable("Car", (string)null);

                    b.HasData(
                        new
                        {
                            CarId = 1,
                            BasePrice = 650000000m,
                            CarModel = "Pajero Sport",
                            CarType = "SUV",
                            Color = "White",
                            Description = "Mitsubishi Pajero Sport, kuat dan nyaman untuk petualangan.",
                            EngineSize = "2.4L",
                            FuelType = "Diesel",
                            Make = "Mitsubishi",
                            Transmission = "Automatic"
                        },
                        new
                        {
                            CarId = 2,
                            BasePrice = 270000000m,
                            CarModel = "Xpander",
                            CarType = "MPV",
                            Color = "Black",
                            Description = "Mitsubishi Xpander, mobil keluarga dengan desain modern.",
                            EngineSize = "1.5L",
                            FuelType = "Gasoline",
                            Make = "Mitsubishi",
                            Transmission = "Automatic"
                        },
                        new
                        {
                            CarId = 3,
                            BasePrice = 550000000m,
                            CarModel = "Outlander",
                            CarType = "SUV",
                            Color = "Silver",
                            Description = "Mitsubishi Outlander, stylish dan elegan.",
                            EngineSize = "2.3L",
                            FuelType = "Gasoline",
                            Make = "Mitsubishi",
                            Transmission = "Automatic"
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.ConsultHistory", b =>
                {
                    b.Property<int>("ConsultHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsultHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultHistoryId"));

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<DateTime>("ConsultDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerCarUnitId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarUnitID");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<string>("StatusConsultation")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("ConsultHistoryId")
                        .HasName("PK__ConsultH__C5DB29E8E7681CCB");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerCarUnitId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("ConsultHistory", (string)null);

                    b.HasData(
                        new
                        {
                            ConsultHistoryId = 1,
                            Budget = 700000000m,
                            ConsultDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            DealerCarUnitId = 1,
                            Note = "Interested in Pajero Sport",
                            SalesPersonId = 1
                        },
                        new
                        {
                            ConsultHistoryId = 2,
                            Budget = 300000000m,
                            ConsultDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            DealerCarUnitId = 2,
                            Note = "Looking for Xpander",
                            SalesPersonId = 2
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.CreditApplication", b =>
                {
                    b.Property<int>("CreditAppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CreditAppID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreditAppId"));

                    b.Property<int?>("AgreementId")
                        .HasColumnType("int")
                        .HasColumnName("AgreementID");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ApprovalStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValue("Pending");

                    b.Property<int?>("InstallmentPerMonth")
                        .HasColumnType("int");

                    b.Property<double?>("InterestRate")
                        .HasColumnType("float");

                    b.Property<int?>("PaymentMade")
                        .HasColumnType("int");

                    b.Property<int?>("TimePeriod")
                        .HasColumnType("int");

                    b.HasKey("CreditAppId")
                        .HasName("PK__CreditAp__5F45706C4EE230F9");

                    b.HasIndex(new[] { "AgreementId" }, "UQ__CreditAp__0A309D22083CEFDF")
                        .IsUnique()
                        .HasFilter("[AgreementID] IS NOT NULL");

                    b.ToTable("CreditApplication", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsGuest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isGuest");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B81043A2F1");

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__A9D10534C957348F")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "idx_Customer_Email");

                    b.HasIndex(new[] { "UserName" }, "idx_Customer_UserName");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "123 Main St",
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "Central Jakarta",
                            Email = "jhonDoe@gmail.com",
                            FirstName = "John",
                            IsGuest = false,
                            LastName = "Doe",
                            Password = "password123",
                            PhoneNumber = "08123456789",
                            Province = "Jakarta",
                            UserName = "johndoe"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "456 Elm St",
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            District = "West Jakarta",
                            Email = "anistiachan04@gmail.com",
                            FirstName = "Anistia",
                            IsGuest = false,
                            LastName = "Chan",
                            Password = "password123",
                            PhoneNumber = "08123456789",
                            Province = "Jakarta",
                            UserName = "anistiachan"
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.CustomerRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("ConsultHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("ConsultHistoryID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<DateTime>("RatingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("RatingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("RatingValue")
                        .HasColumnType("float");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<int?>("TestDriveId")
                        .HasColumnType("int")
                        .HasColumnName("TestDriveID");

                    b.HasKey("RatingId")
                        .HasName("PK__Customer__FCCDF85C2BCC045B");

                    b.HasIndex("DealerId");

                    b.HasIndex(new[] { "ConsultHistoryId" }, "IDX_CustomerRating_ConsultHistoryID");

                    b.HasIndex(new[] { "CustomerId" }, "IDX_CustomerRating_CustomerID");

                    b.HasIndex(new[] { "RatingDate" }, "IDX_CustomerRating_RatingDate");

                    b.HasIndex(new[] { "SalesPersonId" }, "IDX_CustomerRating_SalesPersonID");

                    b.HasIndex(new[] { "TestDriveId" }, "IDX_CustomerRating_TestDriveID");

                    b.ToTable("CustomerRating", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DealerId")
                        .HasName("PK__Dealer__CA2F8E920C5A5183");

                    b.HasIndex(new[] { "DealerName" }, "idx_Dealer_DealerName");

                    b.ToTable("Dealer", (string)null);

                    b.HasData(
                        new
                        {
                            DealerId = 1,
                            Address = "Jl. Sudirman No. 1",
                            City = "Jakarta",
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerName = "Mitsubishi Dealer Jakarta",
                            Email = "mitsubishiJakarta@gmail.com",
                            Location = "Jakarta",
                            PhoneNumber = "021-12345678",
                            Province = "DKI Jakarta"
                        },
                        new
                        {
                            DealerId = 2,
                            Address = "Jl. Diponegoro No. 2",
                            City = "Surabaya",
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerName = "Mitsubishi Dealer Surabaya",
                            Email = "mitsubishiSby@gmail.com",
                            Location = "Surabaya",
                            PhoneNumber = "031-87654321",
                            Province = "Jawa Timur"
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DealerCar", b =>
                {
                    b.Property<int>("DealerCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerCarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerCarId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("CarID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<decimal>("DealerPrice")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasDefaultValue("Available");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.HasKey("DealerCarId")
                        .HasName("PK__DealerCa__7DD0B566EC9EB396");

                    b.HasIndex("CarId");

                    b.HasIndex("DealerId");

                    b.ToTable("DealerCar", (string)null);

                    b.HasData(
                        new
                        {
                            DealerCarId = 1,
                            CarId = 1,
                            DealerId = 1,
                            DealerPrice = 700000000m,
                            Status = "Available",
                            Stock = 5
                        },
                        new
                        {
                            DealerCarId = 2,
                            CarId = 2,
                            DealerId = 1,
                            DealerPrice = 300000000m,
                            Status = "Available",
                            Stock = 4
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DealerCarUnit", b =>
                {
                    b.Property<int>("DealerCarUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DealerCarUnitID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DealerCarUnitId"));

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("DealerCarId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Available");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("VIN");

                    b.Property<int?>("YearManufacture")
                        .HasColumnType("int");

                    b.HasKey("DealerCarUnitId")
                        .HasName("PK__DealerCa__28B4C5F22AB18DDB");

                    b.HasIndex(new[] { "DealerCarId" }, "IDX_DealerCarUnit_DealerCarID");

                    b.HasIndex(new[] { "Status" }, "IDX_DealerCarUnit_Status");

                    b.HasIndex(new[] { "Vin" }, "IDX_DealerCarUnit_VIN")
                        .IsUnique();

                    b.HasIndex(new[] { "Vin" }, "UQ__DealerCa__C5DF234C25296428")
                        .IsUnique();

                    b.ToTable("DealerCarUnit", (string)null);

                    b.HasData(
                        new
                        {
                            DealerCarUnitId = 1,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "White",
                            DealerCarId = 1,
                            Status = "TestDrive",
                            Vin = "VIN1234567893"
                        },
                        new
                        {
                            DealerCarUnitId = 2,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Black",
                            DealerCarId = 1,
                            Status = "Available",
                            Vin = "VIN0987654321"
                        },
                        new
                        {
                            DealerCarUnitId = 3,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Silver",
                            DealerCarId = 1,
                            Status = "Available",
                            Vin = "VIN1234567891"
                        },
                        new
                        {
                            DealerCarUnitId = 4,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Red",
                            DealerCarId = 1,
                            Status = "Available",
                            Vin = "VIN0987654322"
                        },
                        new
                        {
                            DealerCarUnitId = 5,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Blue",
                            DealerCarId = 1,
                            Status = "Available",
                            Vin = "VIN1234567892"
                        },
                        new
                        {
                            DealerCarUnitId = 6,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "White",
                            DealerCarId = 2,
                            Status = "TestDrive",
                            Vin = "VIN1234567895"
                        },
                        new
                        {
                            DealerCarUnitId = 7,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Black",
                            DealerCarId = 2,
                            Status = "Available",
                            Vin = "VIN0987654323"
                        },
                        new
                        {
                            DealerCarUnitId = 8,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Silver",
                            DealerCarId = 2,
                            Status = "Available",
                            Vin = "VIN1234567894"
                        },
                        new
                        {
                            DealerCarUnitId = 9,
                            AddedDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Color = "Red",
                            DealerCarId = 2,
                            Status = "Available",
                            Vin = "VIN0987654324"
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DocumentCreditApplication", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("CreditAppId")
                        .HasColumnType("int")
                        .HasColumnName("CreditAppID");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DocType")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("File_Path");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__1ABEEF6F852BE01C");

                    b.HasIndex("CreditAppId");

                    b.ToTable("DocumentCreditApplication", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GuestID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestId"));

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GuestId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.LetterOfIntent", b =>
                {
                    b.Property<int>("LoiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoiID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoiId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<decimal?>("DownPayment")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<decimal>("FixPrice")
                        .HasColumnType("decimal(15, 2)");

                    b.HasKey("LoiId")
                        .HasName("PK__LetterOf__412C029A7FB45EFB");

                    b.ToTable("LetterOfIntent", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.LoiCarFromDealer", b =>
                {
                    b.Property<int>("LoiId")
                        .HasColumnType("int")
                        .HasColumnName("LoiID");

                    b.Property<int>("DealerCarUnitId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarUnitID");

                    b.Property<int>("TotalUnit")
                        .HasColumnType("int");

                    b.HasKey("LoiId", "DealerCarUnitId")
                        .HasName("PK__LoiCarFr__73A74EC5A0FD1B97");

                    b.HasIndex("DealerCarUnitId");

                    b.ToTable("LoiCarFromDealer", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("ConsultHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("ConsultHistoryID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<int?>("TestDriveId")
                        .HasColumnType("int")
                        .HasColumnName("TestDriveID");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E32BD692188");

                    b.HasIndex("ConsultHistoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("TestDriveId");

                    b.ToTable("Notification", (string)null);

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            DealerId = 1,
                            IsRead = false,
                            Message = "Your test drive for Pajero Sport is scheduled.",
                            NotificationType = "TestDrive",
                            Priority = 0,
                            SalesPersonId = 1,
                            TestDriveId = 1
                        },
                        new
                        {
                            NotificationId = 2,
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            DealerId = 2,
                            IsRead = false,
                            Message = "Your test drive for Xpander is scheduled.",
                            NotificationType = "TestDrive",
                            Priority = 0,
                            SalesPersonId = 2,
                            TestDriveId = 2
                        },
                        new
                        {
                            NotificationId = 3,
                            ConsultHistoryId = 1,
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            DealerId = 1,
                            IsRead = false,
                            Message = "Consultation for Pajero Sport is confirmed.",
                            NotificationType = "Consultation",
                            Priority = 0,
                            SalesPersonId = 1
                        },
                        new
                        {
                            NotificationId = 4,
                            ConsultHistoryId = 2,
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            DealerId = 2,
                            IsRead = false,
                            Message = "Consultation for Xpander is confirmed.",
                            NotificationType = "Consultation",
                            Priority = 0,
                            SalesPersonId = 2
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.PaymentHistory", b =>
                {
                    b.Property<int>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentHistoryId"));

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentNominal")
                        .HasColumnType("int");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseID");

                    b.HasKey("PaymentHistoryId")
                        .HasName("PK__PaymentH__F3B93391D7DFE6B3");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PaymentHistory", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("AgreementId")
                        .HasColumnType("int")
                        .HasColumnName("AgreementID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<decimal>("Nominal")
                        .HasColumnType("decimal(15, 2)");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Belum Lunas");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.HasKey("PurchaseId")
                        .HasName("PK__Purchase__6B0A6BDE6AC1F485");

                    b.HasIndex("CustomerId");

                    b.HasIndex(new[] { "AgreementId" }, "UQ__Purchase__0A309D2284C52C28")
                        .IsUnique();

                    b.ToTable("Purchase", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.SalesActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityLogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLogId"));

                    b.Property<DateTime>("ActivityDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ConsultationId")
                        .HasColumnType("int")
                        .HasColumnName("ConsultationID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<int?>("TestDriveId")
                        .HasColumnType("int")
                        .HasColumnName("TestDriveID");

                    b.HasKey("ActivityLogId")
                        .HasName("PK__SalesAct__19A9B78F2926657B");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("SalesPersonId");

                    b.HasIndex("TestDriveId");

                    b.ToTable("SalesActivityLog", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.SalesPerson", b =>
                {
                    b.Property<int>("SalesPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalesPersonId"));

                    b.Property<int?>("Bonus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("DealerId")
                        .HasColumnType("int")
                        .HasColumnName("DealerID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SalesPersonId")
                        .HasName("PK__SalesPer__7A591C18AFAF1804");

                    b.HasIndex(new[] { "DealerId" }, "IDX_SalesPerson_DealerID");

                    b.HasIndex(new[] { "FullName" }, "IDX_SalesPerson_FullName");

                    b.HasIndex(new[] { "PhoneNumber" }, "IDX_SalesPerson_PhoneNumber");

                    b.HasIndex(new[] { "IsActive" }, "idx_SalesPerson_IsActive_True")
                        .HasFilter("([IsActive]=(1))");

                    b.HasIndex(new[] { "Email" }, "ux_SalesPerson_Email_NotNull")
                        .IsUnique()
                        .HasFilter("([Email] IS NOT NULL)");

                    b.ToTable("SalesPerson", (string)null);

                    b.HasData(
                        new
                        {
                            SalesPersonId = 1,
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = 1,
                            Email = "alicejhonson@gmail.com",
                            FullName = "Alice Johnson",
                            IsActive = true,
                            Password = "password123",
                            PhoneNumber = "08123456789",
                            UserName = "alicej"
                        },
                        new
                        {
                            SalesPersonId = 2,
                            CreatedAt = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DealerId = 2,
                            Email = "anastasya120720@gmail.com",
                            FullName = "Anastasya",
                            IsActive = true,
                            Password = "password123",
                            PhoneNumber = "08123456789",
                            UserName = "anastasya"
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.SalesPersonPerformance", b =>
                {
                    b.Property<int>("PerformanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PerformanceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerformanceId"));

                    b.Property<DateOnly>("MetricDate")
                        .HasColumnType("date");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("MetricValue")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.HasKey("PerformanceId")
                        .HasName("PK__SalesPer__F9606DE1BBC4F70E");

                    b.HasIndex(new[] { "SalesPersonId", "MetricType", "MetricDate" }, "UQ_SalesPersonPerformance_Metric")
                        .IsUnique();

                    b.HasIndex(new[] { "SalesPersonId", "MetricType", "MetricDate" }, "idx_SalesPersonPerformance_SalesPerson_Metric");

                    b.ToTable("SalesPersonPerformance", (string)null);

                    b.HasData(
                        new
                        {
                            PerformanceId = 1,
                            MetricDate = new DateOnly(2023, 12, 12),
                            MetricType = "Sales",
                            MetricValue = 5.0,
                            Notes = "Excellent performance in sales this month.",
                            SalesPersonId = 1
                        },
                        new
                        {
                            PerformanceId = 2,
                            MetricDate = new DateOnly(2023, 12, 12),
                            MetricType = "Customer Satisfaction",
                            MetricValue = 4.5,
                            Notes = "High customer satisfaction ratings.",
                            SalesPersonId = 2
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.TestDrive", b =>
                {
                    b.Property<int>("TestDriveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TestDriveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestDriveId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("DealerCarUnitId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarUnitID");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("SalesPersonId")
                        .HasColumnType("int")
                        .HasColumnName("SalesPersonID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValue("Pending");

                    b.HasKey("TestDriveId")
                        .HasName("PK__TestDriv__BF98EF72A6CC429C");

                    b.HasIndex(new[] { "AppointmentDate" }, "IDX_TestDrive_AppointmentDate");

                    b.HasIndex(new[] { "CustomerId" }, "IDX_TestDrive_CustomerID");

                    b.HasIndex(new[] { "DealerCarUnitId" }, "IDX_TestDrive_DealerCarUnitID");

                    b.HasIndex(new[] { "SalesPersonId" }, "IDX_TestDrive_SalesPersonID");

                    b.ToTable("TestDrive", (string)null);

                    b.HasData(
                        new
                        {
                            TestDriveId = 1,
                            AppointmentDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            DealerCarUnitId = 1,
                            Note = "Test drive for Pajero Sport",
                            SalesPersonId = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            TestDriveId = 2,
                            AppointmentDate = new DateTime(2023, 12, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 2,
                            DealerCarUnitId = 2,
                            Note = "Test drive for Xpander",
                            SalesPersonId = 2,
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("DealerApi.Entities.Models.WarrantyClaim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClaimID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClaimId"));

                    b.Property<DateTime>("ClaimDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ClaimStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("CostCovered")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("WarrantyId")
                        .HasColumnType("int")
                        .HasColumnName("WarrantyID");

                    b.HasKey("ClaimId")
                        .HasName("PK__Warranty__EF2E13BBC5E8A1B3");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("WarrantyClaim", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.WarrantyRegistration", b =>
                {
                    b.Property<int>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WarrantyID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantyId"));

                    b.Property<int>("DealerCarId")
                        .HasColumnType("int")
                        .HasColumnName("DealerCarID");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("WarrantyPeriod")
                        .HasColumnType("int");

                    b.HasKey("WarrantyId")
                        .HasName("PK__Warranty__2ED318F318F9F63B");

                    b.HasIndex(new[] { "DealerCarId" }, "UQ__Warranty__7DD0B56733E60679")
                        .IsUnique();

                    b.ToTable("WarrantyRegistration", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Agreement", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("Agreements")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Custo__7F2BE32F");

                    b.HasOne("DealerApi.Entities.Models.DealerCar", "DealerCar")
                        .WithMany("Agreements")
                        .HasForeignKey("DealerCarId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Deale__01142BA1");

                    b.HasOne("DealerApi.Entities.Models.LetterOfIntent", "Loi")
                        .WithOne("Agreement")
                        .HasForeignKey("DealerApi.Entities.Models.Agreement", "LoiId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__LoiID__02084FDA");

                    b.HasOne("DealerApi.Entities.Models.SalesPerson", "SalesPerson")
                        .WithMany("Agreements")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Sales__00200768");

                    b.Navigation("Customer");

                    b.Navigation("DealerCar");

                    b.Navigation("Loi");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.AgreementUnit", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Agreement", "Agreement")
                        .WithMany("AgreementUnits")
                        .HasForeignKey("AgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Agree__04E4BC85");

                    b.HasOne("DealerApi.Entities.Models.DealerCarUnit", "DealerCarUnit")
                        .WithMany("AgreementUnits")
                        .HasForeignKey("DealerCarUnitId")
                        .IsRequired()
                        .HasConstraintName("FK__Agreement__Deale__05D8E0BE");

                    b.Navigation("Agreement");

                    b.Navigation("DealerCarUnit");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.ConsultHistory", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__ConsultHi__Custo__59FA5E80");

                    b.HasOne("DealerApi.Entities.Models.DealerCarUnit", "DealerCarUnit")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("DealerCarUnitId")
                        .IsRequired()
                        .HasConstraintName("FK__ConsultHi__Deale__5AEE82B9");

                    b.HasOne("DealerApi.Entities.Models.SalesPerson", "SalesPerson")
                        .WithMany("ConsultHistories")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK__ConsultHi__Sales__5BE2A6F2");

                    b.Navigation("Customer");

                    b.Navigation("DealerCarUnit");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.CreditApplication", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Agreement", "Agreement")
                        .WithOne("CreditApplication")
                        .HasForeignKey("DealerApi.Entities.Models.CreditApplication", "AgreementId")
                        .HasConstraintName("FK__CreditApp__Agree__123EB7A3");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.CustomerRating", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.ConsultHistory", "ConsultHistory")
                        .WithMany("CustomerRatings")
                        .HasForeignKey("ConsultHistoryId")
                        .HasConstraintName("FK__CustomerR__Consu__628FA481");

                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("CustomerRatings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerR__Custo__5FB337D6");

                    b.HasOne("DealerApi.Entities.Models.Dealer", "Dealer")
                        .WithMany("CustomerRatings")
                        .HasForeignKey("DealerId")
                        .HasConstraintName("FK__CustomerR__Deale__619B8048");

                    b.HasOne("DealerApi.Entities.Models.SalesPerson", "SalesPerson")
                        .WithMany("CustomerRatings")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK__CustomerR__Sales__60A75C0F");

                    b.HasOne("DealerApi.Entities.Models.TestDrive", "TestDrive")
                        .WithMany("CustomerRatings")
                        .HasForeignKey("TestDriveId")
                        .HasConstraintName("FK__CustomerR__TestD__6383C8BA");

                    b.Navigation("ConsultHistory");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("SalesPerson");

                    b.Navigation("TestDrive");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DealerCar", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Car", "Car")
                        .WithMany("DealerCars")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCar__CarID__440B1D61");

                    b.HasOne("DealerApi.Entities.Models.Dealer", "Dealer")
                        .WithMany("DealerCars")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCar__Deale__4316F928");

                    b.Navigation("Car");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DealerCarUnit", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.DealerCar", "DealerCar")
                        .WithMany("DealerCarUnits")
                        .HasForeignKey("DealerCarId")
                        .IsRequired()
                        .HasConstraintName("FK__DealerCar__Deale__49C3F6B7");

                    b.Navigation("DealerCar");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DocumentCreditApplication", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.CreditApplication", "CreditApp")
                        .WithMany("DocumentCreditApplications")
                        .HasForeignKey("CreditAppId")
                        .IsRequired()
                        .HasConstraintName("FK__DocumentC__Credi__151B244E");

                    b.Navigation("CreditApp");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.LoiCarFromDealer", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.DealerCarUnit", "DealerCarUnit")
                        .WithMany("LoiCarFromDealers")
                        .HasForeignKey("DealerCarUnitId")
                        .IsRequired()
                        .HasConstraintName("FK__LoiCarFro__Deale__797309D9");

                    b.HasOne("DealerApi.Entities.Models.LetterOfIntent", "Loi")
                        .WithMany("LoiCarFromDealers")
                        .HasForeignKey("LoiId")
                        .IsRequired()
                        .HasConstraintName("FK__LoiCarFro__LoiID__787EE5A0");

                    b.Navigation("DealerCarUnit");

                    b.Navigation("Loi");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Notification", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.ConsultHistory", "ConsultHistory")
                        .WithMany("Notifications")
                        .HasForeignKey("ConsultHistoryId")
                        .HasConstraintName("FK__Notificat__Consu__6C190EBB");

                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("Notifications")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Notificat__Custo__693CA210");

                    b.HasOne("DealerApi.Entities.Models.Dealer", "Dealer")
                        .WithMany("Notifications")
                        .HasForeignKey("DealerId")
                        .HasConstraintName("FK__Notificat__Deale__6A30C649");

                    b.HasOne("DealerApi.Entities.Models.SalesPerson", "SalesPerson")
                        .WithMany("Notifications")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK__Notificat__Sales__6B24EA82");

                    b.HasOne("DealerApi.Entities.Models.TestDrive", "TestDrive")
                        .WithMany("Notifications")
                        .HasForeignKey("TestDriveId")
                        .HasConstraintName("FK__Notificat__TestD__6D0D32F4");

                    b.Navigation("ConsultHistory");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("SalesPerson");

                    b.Navigation("TestDrive");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.PaymentHistory", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Purchase", "Purchase")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("PurchaseId")
                        .IsRequired()
                        .HasConstraintName("FK__PaymentHi__Purch__17F790F9");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Purchase", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Agreement", "Agreement")
                        .WithOne("Purchase")
                        .HasForeignKey("DealerApi.Entities.Models.Purchase", "AgreementId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchase__Agreem__0C85DE4D");

                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("Purchases")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Purchase__Custom__0B91BA14");

                    b.Navigation("Agreement");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.SalesActivityLog", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.ConsultHistory", "ConsultHistory")
                        .WithMany("SalesActivityLogs")
                        .HasForeignKey("ConsultationId")
                        .HasConstraintName("FK__SalesActi__Consu__74A0C674");

                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("SalesActivityLogs")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesActi__Custo__70DDC3D8");

                    b.HasOne("DealerApi.Entities.Models.Dealer", "Dealer")
                        .WithMany("SalesActivityLogs")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesActi__Deale__71D1E811");

                    b.HasOne("DealerApi.Entities.Models.Notification", "Notification")
                        .WithMany("SalesActivityLogs")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK__SalesActi__Notif__73BA3083");

                    b.HasOne("DealerApi.Entities.Models.SalesPerson", "SalesPerson")
                        .WithMany("SalesActivityLogs")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesActi__Sales__72C60C4A");

                    b.HasOne("DealerApi.Entities.Models.TestDrive", "TestDrive")
                        .WithMany("SalesActivityLogs")
                        .HasForeignKey("TestDriveId")
                        .HasConstraintName("FK__SalesActi__TestD__75A278F5");

                    b.Navigation("ConsultHistory");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Notification");

                    b.Navigation("SalesPerson");

                    b.Navigation("TestDrive");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.SalesPerson", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Dealer", "Dealer")
                        .WithMany("SalesPeople")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesPers__Deale__4E88ABD4");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.SalesPersonPerformance", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.SalesPerson", "SalesPerson")
                        .WithMany("SalesPersonPerformances")
                        .HasForeignKey("SalesPersonId")
                        .IsRequired()
                        .HasConstraintName("FK__SalesPers__Sales__52593CB8");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.TestDrive", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("TestDrives")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Custo__5535A963");

                    b.HasOne("DealerApi.Entities.Models.DealerCarUnit", "DealerCarUnit")
                        .WithMany("TestDrives")
                        .HasForeignKey("DealerCarUnitId")
                        .IsRequired()
                        .HasConstraintName("FK__TestDrive__Deale__5629CD9C");

                    b.HasOne("DealerApi.Entities.Models.SalesPerson", "SalesPerson")
                        .WithMany("TestDrives")
                        .HasForeignKey("SalesPersonId")
                        .HasConstraintName("FK__TestDrive__Sales__571DF1D5");

                    b.Navigation("Customer");

                    b.Navigation("DealerCarUnit");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.WarrantyClaim", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.Customer", "Customer")
                        .WithMany("WarrantyClaims")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyC__Custo__2180FB33");

                    b.HasOne("DealerApi.Entities.Models.WarrantyRegistration", "Warranty")
                        .WithMany("WarrantyClaims")
                        .HasForeignKey("WarrantyId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyC__Warra__208CD6FA");

                    b.Navigation("Customer");

                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.WarrantyRegistration", b =>
                {
                    b.HasOne("DealerApi.Entities.Models.DealerCar", "DealerCar")
                        .WithOne("WarrantyRegistration")
                        .HasForeignKey("DealerApi.Entities.Models.WarrantyRegistration", "DealerCarId")
                        .IsRequired()
                        .HasConstraintName("FK__WarrantyR__Deale__1BC821DD");

                    b.Navigation("DealerCar");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Agreement", b =>
                {
                    b.Navigation("AgreementUnits");

                    b.Navigation("CreditApplication");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Car", b =>
                {
                    b.Navigation("DealerCars");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.ConsultHistory", b =>
                {
                    b.Navigation("CustomerRatings");

                    b.Navigation("Notifications");

                    b.Navigation("SalesActivityLogs");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.CreditApplication", b =>
                {
                    b.Navigation("DocumentCreditApplications");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Customer", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("ConsultHistories");

                    b.Navigation("CustomerRatings");

                    b.Navigation("Notifications");

                    b.Navigation("Purchases");

                    b.Navigation("SalesActivityLogs");

                    b.Navigation("TestDrives");

                    b.Navigation("WarrantyClaims");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Dealer", b =>
                {
                    b.Navigation("CustomerRatings");

                    b.Navigation("DealerCars");

                    b.Navigation("Notifications");

                    b.Navigation("SalesActivityLogs");

                    b.Navigation("SalesPeople");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DealerCar", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("DealerCarUnits");

                    b.Navigation("WarrantyRegistration");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.DealerCarUnit", b =>
                {
                    b.Navigation("AgreementUnits");

                    b.Navigation("ConsultHistories");

                    b.Navigation("LoiCarFromDealers");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.LetterOfIntent", b =>
                {
                    b.Navigation("Agreement");

                    b.Navigation("LoiCarFromDealers");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Notification", b =>
                {
                    b.Navigation("SalesActivityLogs");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.Purchase", b =>
                {
                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.SalesPerson", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("ConsultHistories");

                    b.Navigation("CustomerRatings");

                    b.Navigation("Notifications");

                    b.Navigation("SalesActivityLogs");

                    b.Navigation("SalesPersonPerformances");

                    b.Navigation("TestDrives");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.TestDrive", b =>
                {
                    b.Navigation("CustomerRatings");

                    b.Navigation("Notifications");

                    b.Navigation("SalesActivityLogs");
                });

            modelBuilder.Entity("DealerApi.Entities.Models.WarrantyRegistration", b =>
                {
                    b.Navigation("WarrantyClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
