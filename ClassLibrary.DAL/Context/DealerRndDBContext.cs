// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using DealerApi.Entities.Models;

namespace DealerApi.DAL.Context;

public partial class DealerRndDBContext : DbContext
{
    public DealerRndDBContext(DbContextOptions<DealerRndDBContext> options)
        : base(options)
    {
    }

    public DealerRndDBContext()
    {

    }

    public virtual DbSet<Agreement> Agreements { get; set; }

    public virtual DbSet<AgreementUnit> AgreementUnits { get; set; }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<ConsultHistory> ConsultHistories { get; set; }

    public virtual DbSet<CreditApplication> CreditApplications { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerRating> CustomerRatings { get; set; }

    public virtual DbSet<Dealer> Dealers { get; set; }

    public virtual DbSet<DealerCar> DealerCars { get; set; }

    public virtual DbSet<DealerCarUnit> DealerCarUnits { get; set; }

    public virtual DbSet<DocumentCreditApplication> DocumentCreditApplications { get; set; }

    public virtual DbSet<LetterOfIntent> LetterOfIntents { get; set; }

    public virtual DbSet<LoiCarFromDealer> LoiCarFromDealers { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<PaymentHistory> PaymentHistories { get; set; }

    public virtual DbSet<Purchase> Purchases { get; set; }

    public virtual DbSet<SalesActivityLog> SalesActivityLogs { get; set; }

    public virtual DbSet<SalesPerson> SalesPeople { get; set; }

    public virtual DbSet<SalesPersonPerformance> SalesPersonPerformances { get; set; }

    public virtual DbSet<TestDrive> TestDrives { get; set; }

    public virtual DbSet<WarrantyClaim> WarrantyClaims { get; set; }

    public virtual DbSet<WarrantyRegistration> WarrantyRegistrations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Agreement>(entity =>
        {
            entity.HasKey(e => e.AgreementId).HasName("PK__Agreemen__0A309D23AEAFCFB6");

            entity.ToTable("Agreement");

            entity.HasIndex(e => e.LoiId, "UQ__Agreemen__412C029B3E9E3502").IsUnique();

            entity.Property(e => e.AgreementId).HasColumnName("AgreementID");
            entity.Property(e => e.AgreementDate).HasColumnType("datetime");
            entity.Property(e => e.BookingFee).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.LoiId).HasColumnName("LoiID");
            entity.Property(e => e.MethodPayment)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Credit");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Custo__7F2BE32F");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Deale__01142BA1");

            entity.HasOne(d => d.Loi).WithOne(p => p.Agreement)
                .HasForeignKey<Agreement>(d => d.LoiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__LoiID__02084FDA");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.Agreements)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Sales__00200768");
        });

        modelBuilder.Entity<AgreementUnit>(entity =>
        {
            entity.HasKey(e => e.AgreementUnitId).HasName("PK__Agreemen__3F6CC4780B0D7F5D");

            entity.ToTable("AgreementUnit");

            entity.Property(e => e.AgreementUnitId).HasColumnName("AgreementUnitID");
            entity.Property(e => e.AgreementId).HasColumnName("AgreementID");
            entity.Property(e => e.DealerCarUnitId).HasColumnName("DealerCarUnitID");

            entity.HasOne(d => d.Agreement).WithMany(p => p.AgreementUnits)
                .HasForeignKey(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Agree__04E4BC85");

            entity.HasOne(d => d.DealerCarUnit).WithMany(p => p.AgreementUnits)
                .HasForeignKey(d => d.DealerCarUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Agreement__Deale__05D8E0BE");
        });

        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarId).HasName("PK__Car__68A0340E8C995E35");

            entity.ToTable("Car");

            entity.HasIndex(e => e.CarModel, "idx_Car_CarModel");

            entity.HasIndex(e => e.CarType, "idx_Car_CarType");

            entity.HasIndex(e => e.Make, "idx_Car_Make");

            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.BasePrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CarModel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Color)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.EngineSize)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FuelType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Make)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Transmission)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConsultHistory>(entity =>
        {
            entity.HasKey(e => e.ConsultHistoryId).HasName("PK__ConsultH__C5DB29E8F9D4E9A5");

            entity.ToTable("ConsultHistory");

            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.Budget).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerCarUnitId).HasColumnName("DealerCarUnitID");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__ConsultHi__Custo__59FA5E80");

            entity.HasOne(d => d.DealerCarUnit).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.DealerCarUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Deale__5AEE82B9");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.SalesPersonId)
                .HasConstraintName("FK__ConsultHi__Sales__5BE2A6F2");
        });

        modelBuilder.Entity<CreditApplication>(entity =>
        {
            entity.HasKey(e => e.CreditAppId).HasName("PK__CreditAp__5F45706CB8635AF0");

            entity.ToTable("CreditApplication");

            entity.HasIndex(e => e.AgreementId, "UQ__CreditAp__0A309D222B2C2C1A").IsUnique();

            entity.Property(e => e.CreditAppId).HasColumnName("CreditAppID");
            entity.Property(e => e.AgreementId).HasColumnName("AgreementID");
            entity.Property(e => e.ApprovalDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovalStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValue("Pending");

            entity.HasOne(d => d.Agreement).WithOne(p => p.CreditApplication)
                .HasForeignKey<CreditApplication>(d => d.AgreementId)
                .HasConstraintName("FK__CreditApp__Agree__123EB7A3");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64B8179E3CA2");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.Email, "UQ__Customer__A9D10534F97479E6").IsUnique();

            entity.HasIndex(e => e.Email, "idx_Customer_Email");

            entity.HasIndex(e => e.UserName, "idx_Customer_UserName");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.District)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsGuest)
                .HasDefaultValue(true)
                .HasColumnName("isGuest");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerRating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__Customer__FCCDF85C76337813");

            entity.ToTable("CustomerRating");

            entity.HasIndex(e => e.ConsultHistoryId, "IDX_CustomerRating_ConsultHistoryID");

            entity.HasIndex(e => e.CustomerId, "IDX_CustomerRating_CustomerID");

            entity.HasIndex(e => e.RatingDate, "IDX_CustomerRating_RatingDate");

            entity.HasIndex(e => e.SalesPersonId, "IDX_CustomerRating_SalesPersonID");

            entity.HasIndex(e => e.TestDriveId, "IDX_CustomerRating_TestDriveID");

            entity.Property(e => e.RatingId).HasColumnName("RatingID");
            entity.Property(e => e.Comments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.RatingDate).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.RatingType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");

            entity.HasOne(d => d.ConsultHistory).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.ConsultHistoryId)
                .HasConstraintName("FK__CustomerR__Consu__628FA481");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CustomerR__Custo__5FB337D6");

            entity.HasOne(d => d.Dealer).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.DealerId)
                .HasConstraintName("FK__CustomerR__Deale__619B8048");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.SalesPersonId)
                .HasConstraintName("FK__CustomerR__Sales__60A75C0F");

            entity.HasOne(d => d.TestDrive).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.TestDriveId)
                .HasConstraintName("FK__CustomerR__TestD__6383C8BA");
        });

        modelBuilder.Entity<Dealer>(entity =>
        {
            entity.HasKey(e => e.DealerId).HasName("PK__Dealer__CA2F8E92A830183C");

            entity.ToTable("Dealer");

            entity.HasIndex(e => e.DealerName, "idx_Dealer_DealerName");

            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Address)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DealerName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DealerCar>(entity =>
        {
            entity.HasKey(e => e.DealerCarId).HasName("PK__DealerCa__7DD0B5664A24FE0C");

            entity.ToTable("DealerCar");

            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.DealerPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Available");

            entity.HasOne(d => d.Car).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__CarID__440B1D61");

            entity.HasOne(d => d.Dealer).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__Deale__4316F928");
        });

        modelBuilder.Entity<DealerCarUnit>(entity =>
        {
            entity.HasKey(e => e.DealerCarUnitId).HasName("PK__DealerCa__28B4C5F246BDB807");

            entity.ToTable("DealerCarUnit");

            entity.HasIndex(e => e.DealerCarId, "IDX_DealerCarUnit_DealerCarID");

            entity.HasIndex(e => e.Status, "IDX_DealerCarUnit_Status");

            entity.HasIndex(e => e.Vin, "IDX_DealerCarUnit_VIN").IsUnique();

            entity.HasIndex(e => e.Vin, "UQ__DealerCa__C5DF234C8D75FE01").IsUnique();

            entity.Property(e => e.DealerCarUnitId).HasColumnName("DealerCarUnitID");
            entity.Property(e => e.AddedDate).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Color)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Available");
            entity.Property(e => e.Vin)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VIN");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.DealerCarUnits)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__Deale__49C3F6B7");
        });

        modelBuilder.Entity<DocumentCreditApplication>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PK__Document__1ABEEF6FE471ADB2");

            entity.ToTable("DocumentCreditApplication");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.CreditAppId).HasColumnName("CreditAppID");
            entity.Property(e => e.DocType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FilePath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("File_Path");

            entity.HasOne(d => d.CreditApp).WithMany(p => p.DocumentCreditApplications)
                .HasForeignKey(d => d.CreditAppId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DocumentC__Credi__151B244E");
        });

        modelBuilder.Entity<LetterOfIntent>(entity =>
        {
            entity.HasKey(e => e.LoiId).HasName("PK__LetterOf__412C029A622E8EDF");

            entity.ToTable("LetterOfIntent");

            entity.Property(e => e.LoiId).HasColumnName("LoiID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.DownPayment).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.FixPrice).HasColumnType("decimal(15, 2)");
        });

        modelBuilder.Entity<LoiCarFromDealer>(entity =>
        {
            entity.HasKey(e => new { e.LoiId, e.DealerCarUnitId }).HasName("PK__LoiCarFr__73A74EC546E3FA75");

            entity.ToTable("LoiCarFromDealer");

            entity.Property(e => e.LoiId).HasColumnName("LoiID");
            entity.Property(e => e.DealerCarUnitId).HasColumnName("DealerCarUnitID");

            entity.HasOne(d => d.DealerCarUnit).WithMany(p => p.LoiCarFromDealers)
                .HasForeignKey(d => d.DealerCarUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LoiCarFro__Deale__797309D9");

            entity.HasOne(d => d.Loi).WithMany(p => p.LoiCarFromDealers)
                .HasForeignKey(d => d.LoiId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__LoiCarFro__LoiID__787EE5A0");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E326F072595");

            entity.ToTable("Notification");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.NotificationType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");

            entity.HasOne(d => d.ConsultHistory).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.ConsultHistoryId)
                .HasConstraintName("FK__Notificat__Consu__6C190EBB");

            entity.HasOne(d => d.Customer).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Notificat__Custo__693CA210");

            entity.HasOne(d => d.Dealer).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.DealerId)
                .HasConstraintName("FK__Notificat__Deale__6A30C649");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.SalesPersonId)
                .HasConstraintName("FK__Notificat__Sales__6B24EA82");

            entity.HasOne(d => d.TestDrive).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.TestDriveId)
                .HasConstraintName("FK__Notificat__TestD__6D0D32F4");
        });

        modelBuilder.Entity<PaymentHistory>(entity =>
        {
            entity.HasKey(e => e.PaymentHistoryId).HasName("PK__PaymentH__F3B933910B559580");

            entity.ToTable("PaymentHistory");

            entity.Property(e => e.PaymentHistoryId).HasColumnName("PaymentHistoryID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PurchaseId).HasColumnName("PurchaseID");

            entity.HasOne(d => d.Purchase).WithMany(p => p.PaymentHistories)
                .HasForeignKey(d => d.PurchaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PaymentHi__Purch__17F790F9");
        });

        modelBuilder.Entity<Purchase>(entity =>
        {
            entity.HasKey(e => e.PurchaseId).HasName("PK__Purchase__6B0A6BDE2AD28417");

            entity.ToTable("Purchase");

            entity.HasIndex(e => e.AgreementId, "UQ__Purchase__0A309D22EFF0D9F1").IsUnique();

            entity.Property(e => e.PurchaseId).HasColumnName("PurchaseID");
            entity.Property(e => e.AgreementId).HasColumnName("AgreementID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Nominal).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Belum Lunas");
            entity.Property(e => e.SubmissionDate).HasColumnType("datetime");

            entity.HasOne(d => d.Agreement).WithOne(p => p.Purchase)
                .HasForeignKey<Purchase>(d => d.AgreementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Purchase__Agreem__0C85DE4D");

            entity.HasOne(d => d.Customer).WithMany(p => p.Purchases)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Purchase__Custom__0B91BA14");
        });

        modelBuilder.Entity<SalesActivityLog>(entity =>
        {
            entity.HasKey(e => e.ActivityLogId).HasName("PK__SalesAct__19A9B78F064B83A0");

            entity.ToTable("SalesActivityLog");

            entity.Property(e => e.ActivityLogId).HasColumnName("ActivityLogID");
            entity.Property(e => e.ActivityDate).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.ActivityType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesActi__Custo__70DDC3D8");

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesActi__Deale__71D1E811");

            entity.HasOne(d => d.Notification).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.NotificationId)
                .HasConstraintName("FK__SalesActi__Notif__73BA3083");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesActi__Sales__72C60C4A");
        });

        modelBuilder.Entity<SalesPerson>(entity =>
        {
            entity.HasKey(e => e.SalesPersonId).HasName("PK__SalesPer__7A591C1891F0FAFF");

            entity.ToTable("SalesPerson");

            entity.HasIndex(e => e.DealerId, "IDX_SalesPerson_DealerID");

            entity.HasIndex(e => e.FullName, "IDX_SalesPerson_FullName");

            entity.HasIndex(e => e.PhoneNumber, "IDX_SalesPerson_PhoneNumber");

            entity.HasIndex(e => e.IsActive, "idx_SalesPerson_IsActive_True").HasFilter("([IsActive]=(1))");

            entity.HasIndex(e => e.Email, "ux_SalesPerson_Email_NotNull")
                .IsUnique()
                .HasFilter("([Email] IS NOT NULL)");

            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesPeople)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesPers__Deale__4E88ABD4");
        });

        modelBuilder.Entity<SalesPersonPerformance>(entity =>
        {
            entity.HasKey(e => e.PerformanceId).HasName("PK__SalesPer__F9606DE1D003F1DE");

            entity.ToTable("SalesPersonPerformance");

            entity.HasIndex(e => new { e.SalesPersonId, e.MetricType, e.MetricDate }, "UQ_SalesPersonPerformance_Metric").IsUnique();

            entity.HasIndex(e => new { e.SalesPersonId, e.MetricType, e.MetricDate }, "idx_SalesPersonPerformance_SalesPerson_Metric");

            entity.Property(e => e.PerformanceId).HasColumnName("PerformanceID");
            entity.Property(e => e.MetricType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesPersonPerformances)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesPers__Sales__52593CB8");
        });

        modelBuilder.Entity<TestDrive>(entity =>
        {
            entity.HasKey(e => e.TestDriveId).HasName("PK__TestDriv__BF98EF7276238592");

            entity.ToTable("TestDrive");

            entity.HasIndex(e => e.AppointmentDate, "IDX_TestDrive_AppointmentDate");

            entity.HasIndex(e => e.CustomerId, "IDX_TestDrive_CustomerID");

            entity.HasIndex(e => e.DealerCarUnitId, "IDX_TestDrive_DealerCarUnitID");

            entity.HasIndex(e => e.SalesPersonId, "IDX_TestDrive_SalesPersonID");

            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerCarUnitId).HasColumnName("DealerCarUnitID");
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Custo__5535A963");

            entity.HasOne(d => d.DealerCarUnit).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.DealerCarUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Deale__5629CD9C");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.TestDrives)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TestDrive__Sales__571DF1D5");
        });

        modelBuilder.Entity<WarrantyClaim>(entity =>
        {
            entity.HasKey(e => e.ClaimId).HasName("PK__Warranty__EF2E13BB52A47BB4");

            entity.ToTable("WarrantyClaim");

            entity.Property(e => e.ClaimId).HasColumnName("ClaimID");
            entity.Property(e => e.ClaimDate).HasColumnType("datetime");
            entity.Property(e => e.ClaimStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.WarrantyId).HasColumnName("WarrantyID");

            entity.HasOne(d => d.Customer).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyC__Custo__2180FB33");

            entity.HasOne(d => d.Warranty).WithMany(p => p.WarrantyClaims)
                .HasForeignKey(d => d.WarrantyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyC__Warra__208CD6FA");
        });

        modelBuilder.Entity<WarrantyRegistration>(entity =>
        {
            entity.HasKey(e => e.WarrantyId).HasName("PK__Warranty__2ED318F3CD276A82");

            entity.ToTable("WarrantyRegistration");

            entity.HasIndex(e => e.DealerCarId, "UQ__Warranty__7DD0B567FE70031C").IsUnique();

            entity.Property(e => e.WarrantyId).HasColumnName("WarrantyID");
            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");

            entity.HasOne(d => d.DealerCar).WithOne(p => p.WarrantyRegistration)
                .HasForeignKey<WarrantyRegistration>(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WarrantyR__Deale__1BC821DD");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}