// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using WebPromotion.Models;

namespace WebPromotion.DAL;

public partial class DBPromotionExerciseContext : DbContext
{
    public DBPromotionExerciseContext(DbContextOptions<DBPromotionExerciseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Car> Cars { get; set; }

    public virtual DbSet<ConsultHistory> ConsultHistories { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerRating> CustomerRatings { get; set; }

    public virtual DbSet<Dealer> Dealers { get; set; }

    public virtual DbSet<DealerCar> DealerCars { get; set; }

    public virtual DbSet<DealerCarUnit> DealerCarUnits { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<SalesActivityLog> SalesActivityLogs { get; set; }

    public virtual DbSet<SalesPerson> SalesPeople { get; set; }

    public virtual DbSet<SalesPersonPerformance> SalesPersonPerformances { get; set; }

    public virtual DbSet<TesDrive> TesDrives { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Car>(entity =>
        {
            entity.HasKey(e => e.CarId).HasName("PK__Car__68A0340E91796A4F");

            entity.ToTable("Car");

            entity.HasIndex(e => e.CarModel, "idx_Car_CarModel");

            entity.HasIndex(e => e.CarType, "idx_Car_CarType");

            entity.HasIndex(e => e.Make, "idx_Car_Make");

            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.BasePrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CarModel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarType)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Color)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.EngineSize)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FuelType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Make)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Transmission)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ConsultHistory>(entity =>
        {
            entity.HasKey(e => e.ConsultHistoryId).HasName("PK__ConsultH__C5DB29E8D5284595");

            entity.ToTable("ConsultHistory");

            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.Budget).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Note).IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Custo__5AEE82B9");

            entity.HasOne(d => d.Dealer).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Deale__5BE2A6F2");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.ConsultHistories)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ConsultHi__Sales__5CD6CB2B");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64B869319A5A");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.Email, "UQ__Customer__A9D105348652A81E").IsUnique();

            entity.HasIndex(e => e.Email, "idx_Customer_Email");

            entity.HasIndex(e => e.UserName, "idx_Customer_UserName");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.District)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.IsGuest).HasDefaultValue(true);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerRating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__Customer__FCCDF85C93A9A3C2");

            entity.ToTable("CustomerRating");

            entity.HasIndex(e => e.ConsultHistoryId, "IDX_CustomerRating_ConsultHistoryID");

            entity.HasIndex(e => e.CustomerId, "IDX_CustomerRating_CustomerID");

            entity.HasIndex(e => e.RatingDate, "IDX_CustomerRating_RatingDate");

            entity.HasIndex(e => e.SalesPersonId, "IDX_CustomerRating_SalesPersonID");

            entity.HasIndex(e => e.TestDriveId, "IDX_CustomerRating_TestDriveID");

            entity.Property(e => e.RatingId).HasColumnName("RatingID");
            entity.Property(e => e.Comments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.RatingDate).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.RatingType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");

            entity.HasOne(d => d.ConsultHistory).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.ConsultHistoryId)
                .HasConstraintName("FK__CustomerR__Consu__6383C8BA");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CustomerR__Custo__60A75C0F");

            entity.HasOne(d => d.Dealer).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.DealerId)
                .HasConstraintName("FK__CustomerR__Deale__628FA481");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.SalesPersonId)
                .HasConstraintName("FK__CustomerR__Sales__619B8048");

            entity.HasOne(d => d.TestDrive).WithMany(p => p.CustomerRatings)
                .HasForeignKey(d => d.TestDriveId)
                .HasConstraintName("FK__CustomerR__TestD__6477ECF3");
        });

        modelBuilder.Entity<Dealer>(entity =>
        {
            entity.HasKey(e => e.DealerId).HasName("PK__Dealer__CA2F8E92EC2568C1");

            entity.ToTable("Dealer");

            entity.HasIndex(e => e.DealerName, "idx_Dealer_DealerName");

            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Address)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DealerName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .IsRequired()
                .HasMaxLength(40)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DealerCar>(entity =>
        {
            entity.HasKey(e => e.DealerCarId).HasName("PK__DealerCa__7DD0B5662394F09B");

            entity.ToTable("DealerCar");

            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.DealerPrice).HasColumnType("decimal(15, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValue("Available");

            entity.HasOne(d => d.Car).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__CarID__440B1D61");

            entity.HasOne(d => d.Dealer).WithMany(p => p.DealerCars)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__Deale__4316F928");
        });

        modelBuilder.Entity<DealerCarUnit>(entity =>
        {
            entity.HasKey(e => e.DealerCarUnitId).HasName("PK__DealerCa__28B4C5F28540C91C");

            entity.ToTable("DealerCarUnit");

            entity.HasIndex(e => e.DealerCarId, "IDX_DealerCarUnit_DealerCarID");

            entity.HasIndex(e => e.Status, "IDX_DealerCarUnit_Status");

            entity.HasIndex(e => e.Vin, "IDX_DealerCarUnit_VIN").IsUnique();

            entity.HasIndex(e => e.Vin, "UQ__DealerCa__C5DF234CEB5E86FF").IsUnique();

            entity.Property(e => e.DealerCarUnitId).HasColumnName("DealerCarUnitID");
            entity.Property(e => e.AddedDate).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.Color)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DealerCarId).HasColumnName("DealerCarID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Available");
            entity.Property(e => e.Vin)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VIN");

            entity.HasOne(d => d.DealerCar).WithMany(p => p.DealerCarUnits)
                .HasForeignKey(d => d.DealerCarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DealerCar__Deale__49C3F6B7");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E3223353886");

            entity.ToTable("Notification");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.ConsultHistoryId).HasColumnName("ConsultHistoryID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.NotificationType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");

            entity.HasOne(d => d.ConsultHistory).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.ConsultHistoryId)
                .HasConstraintName("FK__Notificat__Consu__6D0D32F4");

            entity.HasOne(d => d.Customer).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Notificat__Custo__6A30C649");

            entity.HasOne(d => d.Dealer).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.DealerId)
                .HasConstraintName("FK__Notificat__Deale__6B24EA82");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.SalesPersonId)
                .HasConstraintName("FK__Notificat__Sales__6C190EBB");

            entity.HasOne(d => d.TestDrive).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.TestDriveId)
                .HasConstraintName("FK__Notificat__TestD__6E01572D");
        });

        modelBuilder.Entity<SalesActivityLog>(entity =>
        {
            entity.HasKey(e => e.ActivityLogId).HasName("PK__SalesAct__19A9B78F64CB8F43");

            entity.ToTable("SalesActivityLog");

            entity.Property(e => e.ActivityLogId).HasColumnName("ActivityLogID");
            entity.Property(e => e.ActivityDate).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.ActivityType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.RelatedNotificationId).HasColumnName("RelatedNotificationID");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Customer).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesActi__Custo__71D1E811");

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesActi__Deale__72C60C4A");

            entity.HasOne(d => d.RelatedNotification).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.RelatedNotificationId)
                .HasConstraintName("FK__SalesActi__Relat__74AE54BC");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesActivityLogs)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesActi__Sales__73BA3083");
        });

        modelBuilder.Entity<SalesPerson>(entity =>
        {
            entity.HasKey(e => e.SalesPersonId).HasName("PK__SalesPer__7A591C18597C27A7");

            entity.ToTable("SalesPerson");

            entity.HasIndex(e => e.DealerId, "IDX_SalesPerson_DealerID");

            entity.HasIndex(e => e.FullName, "IDX_SalesPerson_FullName");

            entity.HasIndex(e => e.PhoneNumber, "IDX_SalesPerson_PhoneNumber");

            entity.HasIndex(e => e.IsActive, "idx_SalesPerson_IsActive_True").HasFilter("([IsActive]=(1))");

            entity.HasIndex(e => e.Email, "ux_SalesPerson_Email_NotNull")
                .IsUnique()
                .HasFilter("([Email] IS NOT NULL)");

            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(sysutcdatetime())");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Dealer).WithMany(p => p.SalesPeople)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesPers__Deale__4E88ABD4");
        });

        modelBuilder.Entity<SalesPersonPerformance>(entity =>
        {
            entity.HasKey(e => e.PerformanceId).HasName("PK__SalesPer__F9606DE157B69781");

            entity.ToTable("SalesPersonPerformance");

            entity.HasIndex(e => new { e.SalesPersonId, e.MetricType, e.MetricDate }, "UQ_SalesPersonPerformance_Metric").IsUnique();

            entity.HasIndex(e => new { e.SalesPersonId, e.MetricType, e.MetricDate }, "idx_SalesPersonPerformance_SalesPerson_Metric");

            entity.Property(e => e.PerformanceId).HasColumnName("PerformanceID");
            entity.Property(e => e.MetricType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.SalesPersonPerformances)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SalesPers__Sales__52593CB8");
        });

        modelBuilder.Entity<TesDrive>(entity =>
        {
            entity.HasKey(e => e.TestDriveId).HasName("PK__TesDrive__BF98EF72FD30654A");

            entity.ToTable("TesDrive");

            entity.HasIndex(e => e.AppointmentDate, "IDX_TestDrive_AppointmentDate");

            entity.HasIndex(e => e.CustomerId, "IDX_TestDrive_CustomerID");

            entity.HasIndex(e => e.DealerId, "IDX_TestDrive_DealerID");

            entity.HasIndex(e => e.SalesPersonId, "IDX_TestDrive_SalesPersonID");

            entity.Property(e => e.TestDriveId).HasColumnName("TestDriveID");
            entity.Property(e => e.CarId).HasColumnName("CarID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DealerId).HasColumnName("DealerID");
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.SalesPersonId).HasColumnName("SalesPersonID");

            entity.HasOne(d => d.Car).WithMany(p => p.TesDrives)
                .HasForeignKey(d => d.CarId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TesDrive__CarID__5812160E");

            entity.HasOne(d => d.Customer).WithMany(p => p.TesDrives)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TesDrive__Custom__5535A963");

            entity.HasOne(d => d.Dealer).WithMany(p => p.TesDrives)
                .HasForeignKey(d => d.DealerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TesDrive__Dealer__5629CD9C");

            entity.HasOne(d => d.SalesPerson).WithMany(p => p.TesDrives)
                .HasForeignKey(d => d.SalesPersonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TesDrive__SalesP__571DF1D5");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}